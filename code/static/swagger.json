openapi: 3.0.1
info:
  title: Python REST CRUD API
  description: This is a sample API REST in Python. You can find out more about this
    API in https://github.com/evelyntavares/python-rest-api-crud.git.
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://localhost:5000
tags:
- name: product
  description: Everything about your Products
- name: warehouse
  description: Everything about your Warehouses
- name: users
  description: Operations related to users
paths:
  /api/products:
    get:
      tags:
      - product
      summary: Finds all products
      operationId: findProducts
      responses:
        200:
          description: Product found
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /api/products/{sku}:
    get:
      tags:
      - product
      summary: Finds product by sku
      operationId: findProductBySku
      parameters:
      - name: sku
        in: path
        description: Status values that need to be considered for filter
        required: true
        schema:
          type: string
      responses:
        200:
          description: Product found
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        404:
          description: Product not found
    put:
      tags:
      - product
      summary: Updates an existing product
      operationId: updateProduct
      parameters:
      - name: sku
        in: path
        description: Product object that needs to be added/updated
        required: true
        schema:
          type: integer
      requestBody:
        description: Product object that needs to be added/updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        201:
          description: Product created successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalError'
    post:
      tags:
      - product
      summary: Adds a new product
      operationId: addProduct
      parameters:
      - name: sku
        in: path
        description: Product sku that needs to be added
        required: true
        schema:
          type: integer
      requestBody:
        description: Product object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        201:
          description: Product created successfully
        400:
          description: Product with sku informed already exists
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
      - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
      - name: sku
        in: path
        description: Product sku to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Product deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: No product with sku informed was found to be deleted
  /api/warehouses:
    get:
      tags:
      - warehouse
      summary: Finds all warehouses
      description: Finds all warehouses
      operationId: getWarehouses
      responses:
        200:
          description: Product deleted successfully
  /api/warehouses/{location}:
    get:
      tags:
      - warehouse
      summary: Finds warehouses by location
      description: Finds warehouses by location
      operationId: getWarehouse
      parameters:
      - name: location
        in: path
        description: Location of the warehouse that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: Product deleted successfully
        404:
          description: No product with sku informed was found to be deleted
    put:
      tags:
      - warehouse
      summary: Updates an existing warehouse
      operationId: updateWarehouse
      parameters:
      - name: location
        in: path
        description: Warehouse object that needs to be added/updated
        required: true
        schema:
          type: string
      requestBody:
        description: Warehouse object that needs to be added/updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
          application/xml:
            schema:
              $ref: '#/components/schemas/Warehouse'
        required: true
      responses:
        201:
          description: Product created successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalError'
    post:
      tags:
      - warehouse
      summary: Adds a new warehouse
      operationId: addWarehouse
      parameters:
      - name: location
        in: path
        description: Warehouse location that needs to be added
        required: true
        schema:
          type: string
      requestBody:
        description: Warehouse object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
          application/xml:
            schema:
              $ref: '#/components/schemas/Warehouse'
        required: true
      responses:
        201:
          description: Product created successfully
        400:
          description: A warehouse with location and type informed already exists
            in database
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
      - warehouse
      summary: Deletes a warehouse
      operationId: deleteWarehouse
      parameters:
      - name: location
        in: path
        description: Warehouse location to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: Warehouse deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: No warehouse with location informed was found to be deleted
  /auth:
    post:
      tags:
      - users
      summary: Authenticates user
      operationId: authenticateUser
      requestBody:
        description: User that needs to be authenticated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: Returns a valid access token
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /api/register-users:
    post:
      tags:
      - users
      summary: Registers user
      operationId: registerUser
      requestBody:
        description: User that needs to be registered
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: User created successfully
        400:
          description: Username informed already exists in database
        500:
          description: An error occurred while saving saving user
components:
  schemas:
    Product:
      type: object
      properties:
        sku:
          type: integer
          format: int64
        name:
          type: string
        warehouses:
          type: array
          items:
            type: object
            properties: {}
      xml:
        name: Product
    Warehouse:
      type: object
      properties:
        location:
          type: string
        quantity:
          type: integer
          format: int64
        type:
          type: string
        product_sku:
          type: integer
      xml:
        name: Warehouse
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      xml:
        name: User
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Signature has expired - Invalid token
    InternalError:
      description: An error occurred while saving record
